openapi: 3.0.3
info:
  title: TypeScript CRUD API
  version: 1.0.0
servers:
  - url: http://localhost:3000

paths:
  /api/posts:
    post:
      summary: Create a post
      tags:
        - Posts
      requestBody:
        $ref: '#/components/requestBodies/NewPost'
      responses:
        '201':
          $ref: '#/components/responses/PostCreated'
        '400':
          $ref: '#/components/responses/BadRequest'
    get:
      summary: List posts
      tags:
        - Posts
      responses:
        '200':
          $ref: '#/components/responses/PostsList'

  /api/posts/{id}:
    parameters:
      - $ref: '#/components/parameters/PostId'
    get:
      summary: Get a post by ID
      tags:
        - Posts
      responses:
        '200':
          $ref: '#/components/responses/SinglePost'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a post by ID
      tags:
        - Posts
      requestBody:
        $ref: '#/components/requestBodies/UpdatePost'
      responses:
        '200':
          $ref: '#/components/responses/SinglePost'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a post by ID
      tags:
        - Posts
      responses:
        '204':
          description: No Content
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Post:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

  parameters:
    PostId:
      name: id
      in: path
      required: true
      schema:
        type: string
      description: ID of the post

  requestBodies:
    NewPost:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - title
              - content
            properties:
              title:
                type: string
              content:
                type: string

    UpdatePost:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
              content:
                type: string

  responses:
    PostCreated:
      description: Post created successfully
      content:
        application/json:
          schema:
            type: object
            properties:
              post:
                $ref: '#/components/schemas/Post'

    PostsList:
      description: List of posts
      content:
        application/json:
          schema:
            type: object
            properties:
              posts:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

    SinglePost:
      description: A single post
      content:
        application/json:
          schema:
            type: object
            properties:
              post:
                $ref: '#/components/schemas/Post'

    BadRequest:
      description: Invalid input
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
